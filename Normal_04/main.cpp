#include <iostream>

using namespace std;
//---------------------Функции и Прототипы---------------------------------------

/*
Изначально есть указатель на массив с одним элементом.
Пользователь вводит число.Если оно больше 0 записываем его в массив.
Далее пользователь вводит второе число, тут уже, если оно больше 0,
надо пере выделять память для 2 - х элементов массива и записать в массив второе число.
И так далее…  для 3 - х элементов, для 4 - х…  пока пользователь не введет отрицательное число.
*/

void push_back(int*& arr, int& size, int x);



//------------------------MAIN----------------------------------------------------
int main() {
	setlocale(LC_ALL, "RU");
	srand(time(NULL));
	//-------------------------------САМА ПРОГА-------------------------------------

	int x, size = 1;

	// первый ввод числа и создание массива делаем за пределами цикла ( что бы не парится с удалением массива в цикле)

	cout << "Введите целое число: ";
	cin >> x;
	int* arr = new int[size];
	if (x > 0)
	{
		arr[0] = x;
		cout << x ;
	}


	while (x > 0)
	{
		cout << endl << "Введите целое число: ";
		cin >> x;
		if (x > 0)
		{
			push_back(arr, size, x);               // добавили х в конец массива 
			for (int i = 0; i < size; i++)         // и вывели массив на экран
			{
				cout << arr[i] << " ";
			}
		}
	}
	
	
	delete[]arr;

	system("pause");

	return 0;
}

 

/* 
      *& УКАЗАТЕЛЬ на ССЫЛКУ ( передаем адрес указателя , который указывает на динам. массив )
      При обычной передачи указателя , мы можем менять данные , но НЕ АДРЕС переданого указат.
	  &size - что бы менять размер в функции
	  x - передаем число , которое нужно вставить в конец массива
 */

void push_back(int*& arr, int& size, int x)
{
	int* reserv_arr = new int[size + 1];       // создаем резервный массив с местом под лишний элемент
	for (int i = 0; i < size; i++)
	{
		reserv_arr[i] = arr[i];                // поэлементно сохраняем в него наш базовый массив
	}

	reserv_arr[size] = x;                      // sizидет после последнего ( но мы на него увеличили )

	size++;
	delete[]arr;                   // удаляем старый массив
	arr = reserv_arr;              // меняем адрес ( теперь старый массив указывает на новый )
}

